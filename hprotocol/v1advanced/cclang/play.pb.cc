// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play.proto

#include "play.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_advanced_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Buzz_advanced_2eproto;
namespace v1advanced {
class BuzzPlayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuzzPlay> _instance;
} _BuzzPlay_default_instance_;
}  // namespace v1advanced
static void InitDefaultsscc_info_BuzzPlay_play_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::v1advanced::_BuzzPlay_default_instance_;
    new (ptr) ::v1advanced::BuzzPlay();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::v1advanced::BuzzPlay::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuzzPlay_play_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BuzzPlay_play_2eproto}, {
      &scc_info_Buzz_advanced_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_play_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_play_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_play_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_play_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1advanced::BuzzPlay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1advanced::BuzzPlay, buzz_),
  PROTOBUF_FIELD_OFFSET(::v1advanced::BuzzPlay, where_),
  PROTOBUF_FIELD_OFFSET(::v1advanced::BuzzPlay, who_),
  PROTOBUF_FIELD_OFFSET(::v1advanced::BuzzPlay, how_),
  PROTOBUF_FIELD_OFFSET(::v1advanced::BuzzPlay, what_),
  PROTOBUF_FIELD_OFFSET(::v1advanced::BuzzPlay, why_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::v1advanced::BuzzPlay)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1advanced::_BuzzPlay_default_instance_),
};

const char descriptor_table_protodef_play_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nplay.proto\022\nv1advanced\032\016advanced.proto"
  "\"n\n\010BuzzPlay\022\036\n\004buzz\030\001 \001(\0132\020.v1advanced."
  "Buzz\022\r\n\005where\030\002 \001(\014\022\013\n\003who\030\003 \001(\014\022\013\n\003how\030"
  "\004 \001(\014\022\014\n\004what\030\005 \001(\014\022\013\n\003why\030\006 \001(\014b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_play_2eproto_deps[1] = {
  &::descriptor_table_advanced_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_play_2eproto_sccs[1] = {
  &scc_info_BuzzPlay_play_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_play_2eproto_once;
static bool descriptor_table_play_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_play_2eproto = {
  &descriptor_table_play_2eproto_initialized, descriptor_table_protodef_play_2eproto, "play.proto", 160,
  &descriptor_table_play_2eproto_once, descriptor_table_play_2eproto_sccs, descriptor_table_play_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_play_2eproto::offsets,
  file_level_metadata_play_2eproto, 1, file_level_enum_descriptors_play_2eproto, file_level_service_descriptors_play_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_play_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_play_2eproto), true);
namespace v1advanced {

// ===================================================================

void BuzzPlay::InitAsDefaultInstance() {
  ::v1advanced::_BuzzPlay_default_instance_._instance.get_mutable()->buzz_ = const_cast< ::v1advanced::Buzz*>(
      ::v1advanced::Buzz::internal_default_instance());
}
class BuzzPlay::_Internal {
 public:
  static const ::v1advanced::Buzz& buzz(const BuzzPlay* msg);
};

const ::v1advanced::Buzz&
BuzzPlay::_Internal::buzz(const BuzzPlay* msg) {
  return *msg->buzz_;
}
void BuzzPlay::clear_buzz() {
  if (GetArenaNoVirtual() == nullptr && buzz_ != nullptr) {
    delete buzz_;
  }
  buzz_ = nullptr;
}
BuzzPlay::BuzzPlay()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:v1advanced.BuzzPlay)
}
BuzzPlay::BuzzPlay(const BuzzPlay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  where_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_where().empty()) {
    where_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.where_);
  }
  who_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_who().empty()) {
    who_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.who_);
  }
  how_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_how().empty()) {
    how_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.how_);
  }
  what_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_what().empty()) {
    what_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.what_);
  }
  why_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_why().empty()) {
    why_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.why_);
  }
  if (from._internal_has_buzz()) {
    buzz_ = new ::v1advanced::Buzz(*from.buzz_);
  } else {
    buzz_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1advanced.BuzzPlay)
}

void BuzzPlay::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuzzPlay_play_2eproto.base);
  where_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  who_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  how_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  what_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  why_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buzz_ = nullptr;
}

BuzzPlay::~BuzzPlay() {
  // @@protoc_insertion_point(destructor:v1advanced.BuzzPlay)
  SharedDtor();
}

void BuzzPlay::SharedDtor() {
  where_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  who_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  how_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  what_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  why_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete buzz_;
}

void BuzzPlay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuzzPlay& BuzzPlay::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuzzPlay_play_2eproto.base);
  return *internal_default_instance();
}


void BuzzPlay::Clear() {
// @@protoc_insertion_point(message_clear_start:v1advanced.BuzzPlay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  where_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  who_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  how_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  what_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  why_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && buzz_ != nullptr) {
    delete buzz_;
  }
  buzz_ = nullptr;
  _internal_metadata_.Clear();
}

const char* BuzzPlay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .v1advanced.Buzz buzz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_buzz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes where = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_where();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes who = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_who();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes how = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_how();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes what = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_what();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes why = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_why();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuzzPlay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1advanced.BuzzPlay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v1advanced.Buzz buzz = 1;
  if (this->has_buzz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::buzz(this), target, stream);
  }

  // bytes where = 2;
  if (this->where().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_where(), target);
  }

  // bytes who = 3;
  if (this->who().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_who(), target);
  }

  // bytes how = 4;
  if (this->how().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_how(), target);
  }

  // bytes what = 5;
  if (this->what().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_what(), target);
  }

  // bytes why = 6;
  if (this->why().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_why(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1advanced.BuzzPlay)
  return target;
}

size_t BuzzPlay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1advanced.BuzzPlay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes where = 2;
  if (this->where().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_where());
  }

  // bytes who = 3;
  if (this->who().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_who());
  }

  // bytes how = 4;
  if (this->how().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_how());
  }

  // bytes what = 5;
  if (this->what().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_what());
  }

  // bytes why = 6;
  if (this->why().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_why());
  }

  // .v1advanced.Buzz buzz = 1;
  if (this->has_buzz()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buzz_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuzzPlay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1advanced.BuzzPlay)
  GOOGLE_DCHECK_NE(&from, this);
  const BuzzPlay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuzzPlay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1advanced.BuzzPlay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1advanced.BuzzPlay)
    MergeFrom(*source);
  }
}

void BuzzPlay::MergeFrom(const BuzzPlay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1advanced.BuzzPlay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.where().size() > 0) {

    where_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.where_);
  }
  if (from.who().size() > 0) {

    who_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.who_);
  }
  if (from.how().size() > 0) {

    how_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.how_);
  }
  if (from.what().size() > 0) {

    what_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.what_);
  }
  if (from.why().size() > 0) {

    why_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.why_);
  }
  if (from.has_buzz()) {
    _internal_mutable_buzz()->::v1advanced::Buzz::MergeFrom(from._internal_buzz());
  }
}

void BuzzPlay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1advanced.BuzzPlay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuzzPlay::CopyFrom(const BuzzPlay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1advanced.BuzzPlay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuzzPlay::IsInitialized() const {
  return true;
}

void BuzzPlay::InternalSwap(BuzzPlay* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  where_.Swap(&other->where_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  who_.Swap(&other->who_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  how_.Swap(&other->how_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  what_.Swap(&other->what_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  why_.Swap(&other->why_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(buzz_, other->buzz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuzzPlay::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1advanced
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v1advanced::BuzzPlay* Arena::CreateMaybeMessage< ::v1advanced::BuzzPlay >(Arena* arena) {
  return Arena::CreateInternal< ::v1advanced::BuzzPlay >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
