// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: play.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_play_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_play_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "advanced.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_play_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_play_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_play_2eproto;
namespace v1advanced {
class BuzzPlay;
class BuzzPlayDefaultTypeInternal;
extern BuzzPlayDefaultTypeInternal _BuzzPlay_default_instance_;
}  // namespace v1advanced
PROTOBUF_NAMESPACE_OPEN
template<> ::v1advanced::BuzzPlay* Arena::CreateMaybeMessage<::v1advanced::BuzzPlay>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v1advanced {

// ===================================================================

class BuzzPlay :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1advanced.BuzzPlay) */ {
 public:
  BuzzPlay();
  virtual ~BuzzPlay();

  BuzzPlay(const BuzzPlay& from);
  BuzzPlay(BuzzPlay&& from) noexcept
    : BuzzPlay() {
    *this = ::std::move(from);
  }

  inline BuzzPlay& operator=(const BuzzPlay& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuzzPlay& operator=(BuzzPlay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuzzPlay& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuzzPlay* internal_default_instance() {
    return reinterpret_cast<const BuzzPlay*>(
               &_BuzzPlay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BuzzPlay& a, BuzzPlay& b) {
    a.Swap(&b);
  }
  inline void Swap(BuzzPlay* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuzzPlay* New() const final {
    return CreateMaybeMessage<BuzzPlay>(nullptr);
  }

  BuzzPlay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuzzPlay>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuzzPlay& from);
  void MergeFrom(const BuzzPlay& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuzzPlay* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1advanced.BuzzPlay";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_play_2eproto);
    return ::descriptor_table_play_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWhereFieldNumber = 2,
    kWhoFieldNumber = 3,
    kHowFieldNumber = 4,
    kWhatFieldNumber = 5,
    kWhyFieldNumber = 6,
    kBuzzFieldNumber = 1,
  };
  // bytes where = 2;
  void clear_where();
  const std::string& where() const;
  void set_where(const std::string& value);
  void set_where(std::string&& value);
  void set_where(const char* value);
  void set_where(const void* value, size_t size);
  std::string* mutable_where();
  std::string* release_where();
  void set_allocated_where(std::string* where);
  private:
  const std::string& _internal_where() const;
  void _internal_set_where(const std::string& value);
  std::string* _internal_mutable_where();
  public:

  // bytes who = 3;
  void clear_who();
  const std::string& who() const;
  void set_who(const std::string& value);
  void set_who(std::string&& value);
  void set_who(const char* value);
  void set_who(const void* value, size_t size);
  std::string* mutable_who();
  std::string* release_who();
  void set_allocated_who(std::string* who);
  private:
  const std::string& _internal_who() const;
  void _internal_set_who(const std::string& value);
  std::string* _internal_mutable_who();
  public:

  // bytes how = 4;
  void clear_how();
  const std::string& how() const;
  void set_how(const std::string& value);
  void set_how(std::string&& value);
  void set_how(const char* value);
  void set_how(const void* value, size_t size);
  std::string* mutable_how();
  std::string* release_how();
  void set_allocated_how(std::string* how);
  private:
  const std::string& _internal_how() const;
  void _internal_set_how(const std::string& value);
  std::string* _internal_mutable_how();
  public:

  // bytes what = 5;
  void clear_what();
  const std::string& what() const;
  void set_what(const std::string& value);
  void set_what(std::string&& value);
  void set_what(const char* value);
  void set_what(const void* value, size_t size);
  std::string* mutable_what();
  std::string* release_what();
  void set_allocated_what(std::string* what);
  private:
  const std::string& _internal_what() const;
  void _internal_set_what(const std::string& value);
  std::string* _internal_mutable_what();
  public:

  // bytes why = 6;
  void clear_why();
  const std::string& why() const;
  void set_why(const std::string& value);
  void set_why(std::string&& value);
  void set_why(const char* value);
  void set_why(const void* value, size_t size);
  std::string* mutable_why();
  std::string* release_why();
  void set_allocated_why(std::string* why);
  private:
  const std::string& _internal_why() const;
  void _internal_set_why(const std::string& value);
  std::string* _internal_mutable_why();
  public:

  // .v1advanced.Buzz buzz = 1;
  bool has_buzz() const;
  private:
  bool _internal_has_buzz() const;
  public:
  void clear_buzz();
  const ::v1advanced::Buzz& buzz() const;
  ::v1advanced::Buzz* release_buzz();
  ::v1advanced::Buzz* mutable_buzz();
  void set_allocated_buzz(::v1advanced::Buzz* buzz);
  private:
  const ::v1advanced::Buzz& _internal_buzz() const;
  ::v1advanced::Buzz* _internal_mutable_buzz();
  public:

  // @@protoc_insertion_point(class_scope:v1advanced.BuzzPlay)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr where_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr who_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr how_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr what_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr why_;
  ::v1advanced::Buzz* buzz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_play_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BuzzPlay

// .v1advanced.Buzz buzz = 1;
inline bool BuzzPlay::_internal_has_buzz() const {
  return this != internal_default_instance() && buzz_ != nullptr;
}
inline bool BuzzPlay::has_buzz() const {
  return _internal_has_buzz();
}
inline const ::v1advanced::Buzz& BuzzPlay::_internal_buzz() const {
  const ::v1advanced::Buzz* p = buzz_;
  return p != nullptr ? *p : *reinterpret_cast<const ::v1advanced::Buzz*>(
      &::v1advanced::_Buzz_default_instance_);
}
inline const ::v1advanced::Buzz& BuzzPlay::buzz() const {
  // @@protoc_insertion_point(field_get:v1advanced.BuzzPlay.buzz)
  return _internal_buzz();
}
inline ::v1advanced::Buzz* BuzzPlay::release_buzz() {
  // @@protoc_insertion_point(field_release:v1advanced.BuzzPlay.buzz)
  
  ::v1advanced::Buzz* temp = buzz_;
  buzz_ = nullptr;
  return temp;
}
inline ::v1advanced::Buzz* BuzzPlay::_internal_mutable_buzz() {
  
  if (buzz_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1advanced::Buzz>(GetArenaNoVirtual());
    buzz_ = p;
  }
  return buzz_;
}
inline ::v1advanced::Buzz* BuzzPlay::mutable_buzz() {
  // @@protoc_insertion_point(field_mutable:v1advanced.BuzzPlay.buzz)
  return _internal_mutable_buzz();
}
inline void BuzzPlay::set_allocated_buzz(::v1advanced::Buzz* buzz) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(buzz_);
  }
  if (buzz) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      buzz = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buzz, submessage_arena);
    }
    
  } else {
    
  }
  buzz_ = buzz;
  // @@protoc_insertion_point(field_set_allocated:v1advanced.BuzzPlay.buzz)
}

// bytes where = 2;
inline void BuzzPlay::clear_where() {
  where_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuzzPlay::where() const {
  // @@protoc_insertion_point(field_get:v1advanced.BuzzPlay.where)
  return _internal_where();
}
inline void BuzzPlay::set_where(const std::string& value) {
  _internal_set_where(value);
  // @@protoc_insertion_point(field_set:v1advanced.BuzzPlay.where)
}
inline std::string* BuzzPlay::mutable_where() {
  // @@protoc_insertion_point(field_mutable:v1advanced.BuzzPlay.where)
  return _internal_mutable_where();
}
inline const std::string& BuzzPlay::_internal_where() const {
  return where_.GetNoArena();
}
inline void BuzzPlay::_internal_set_where(const std::string& value) {
  
  where_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BuzzPlay::set_where(std::string&& value) {
  
  where_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1advanced.BuzzPlay.where)
}
inline void BuzzPlay::set_where(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  where_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1advanced.BuzzPlay.where)
}
inline void BuzzPlay::set_where(const void* value, size_t size) {
  
  where_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1advanced.BuzzPlay.where)
}
inline std::string* BuzzPlay::_internal_mutable_where() {
  
  return where_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuzzPlay::release_where() {
  // @@protoc_insertion_point(field_release:v1advanced.BuzzPlay.where)
  
  return where_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuzzPlay::set_allocated_where(std::string* where) {
  if (where != nullptr) {
    
  } else {
    
  }
  where_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), where);
  // @@protoc_insertion_point(field_set_allocated:v1advanced.BuzzPlay.where)
}

// bytes who = 3;
inline void BuzzPlay::clear_who() {
  who_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuzzPlay::who() const {
  // @@protoc_insertion_point(field_get:v1advanced.BuzzPlay.who)
  return _internal_who();
}
inline void BuzzPlay::set_who(const std::string& value) {
  _internal_set_who(value);
  // @@protoc_insertion_point(field_set:v1advanced.BuzzPlay.who)
}
inline std::string* BuzzPlay::mutable_who() {
  // @@protoc_insertion_point(field_mutable:v1advanced.BuzzPlay.who)
  return _internal_mutable_who();
}
inline const std::string& BuzzPlay::_internal_who() const {
  return who_.GetNoArena();
}
inline void BuzzPlay::_internal_set_who(const std::string& value) {
  
  who_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BuzzPlay::set_who(std::string&& value) {
  
  who_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1advanced.BuzzPlay.who)
}
inline void BuzzPlay::set_who(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  who_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1advanced.BuzzPlay.who)
}
inline void BuzzPlay::set_who(const void* value, size_t size) {
  
  who_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1advanced.BuzzPlay.who)
}
inline std::string* BuzzPlay::_internal_mutable_who() {
  
  return who_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuzzPlay::release_who() {
  // @@protoc_insertion_point(field_release:v1advanced.BuzzPlay.who)
  
  return who_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuzzPlay::set_allocated_who(std::string* who) {
  if (who != nullptr) {
    
  } else {
    
  }
  who_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), who);
  // @@protoc_insertion_point(field_set_allocated:v1advanced.BuzzPlay.who)
}

// bytes how = 4;
inline void BuzzPlay::clear_how() {
  how_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuzzPlay::how() const {
  // @@protoc_insertion_point(field_get:v1advanced.BuzzPlay.how)
  return _internal_how();
}
inline void BuzzPlay::set_how(const std::string& value) {
  _internal_set_how(value);
  // @@protoc_insertion_point(field_set:v1advanced.BuzzPlay.how)
}
inline std::string* BuzzPlay::mutable_how() {
  // @@protoc_insertion_point(field_mutable:v1advanced.BuzzPlay.how)
  return _internal_mutable_how();
}
inline const std::string& BuzzPlay::_internal_how() const {
  return how_.GetNoArena();
}
inline void BuzzPlay::_internal_set_how(const std::string& value) {
  
  how_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BuzzPlay::set_how(std::string&& value) {
  
  how_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1advanced.BuzzPlay.how)
}
inline void BuzzPlay::set_how(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  how_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1advanced.BuzzPlay.how)
}
inline void BuzzPlay::set_how(const void* value, size_t size) {
  
  how_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1advanced.BuzzPlay.how)
}
inline std::string* BuzzPlay::_internal_mutable_how() {
  
  return how_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuzzPlay::release_how() {
  // @@protoc_insertion_point(field_release:v1advanced.BuzzPlay.how)
  
  return how_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuzzPlay::set_allocated_how(std::string* how) {
  if (how != nullptr) {
    
  } else {
    
  }
  how_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), how);
  // @@protoc_insertion_point(field_set_allocated:v1advanced.BuzzPlay.how)
}

// bytes what = 5;
inline void BuzzPlay::clear_what() {
  what_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuzzPlay::what() const {
  // @@protoc_insertion_point(field_get:v1advanced.BuzzPlay.what)
  return _internal_what();
}
inline void BuzzPlay::set_what(const std::string& value) {
  _internal_set_what(value);
  // @@protoc_insertion_point(field_set:v1advanced.BuzzPlay.what)
}
inline std::string* BuzzPlay::mutable_what() {
  // @@protoc_insertion_point(field_mutable:v1advanced.BuzzPlay.what)
  return _internal_mutable_what();
}
inline const std::string& BuzzPlay::_internal_what() const {
  return what_.GetNoArena();
}
inline void BuzzPlay::_internal_set_what(const std::string& value) {
  
  what_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BuzzPlay::set_what(std::string&& value) {
  
  what_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1advanced.BuzzPlay.what)
}
inline void BuzzPlay::set_what(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  what_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1advanced.BuzzPlay.what)
}
inline void BuzzPlay::set_what(const void* value, size_t size) {
  
  what_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1advanced.BuzzPlay.what)
}
inline std::string* BuzzPlay::_internal_mutable_what() {
  
  return what_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuzzPlay::release_what() {
  // @@protoc_insertion_point(field_release:v1advanced.BuzzPlay.what)
  
  return what_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuzzPlay::set_allocated_what(std::string* what) {
  if (what != nullptr) {
    
  } else {
    
  }
  what_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), what);
  // @@protoc_insertion_point(field_set_allocated:v1advanced.BuzzPlay.what)
}

// bytes why = 6;
inline void BuzzPlay::clear_why() {
  why_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuzzPlay::why() const {
  // @@protoc_insertion_point(field_get:v1advanced.BuzzPlay.why)
  return _internal_why();
}
inline void BuzzPlay::set_why(const std::string& value) {
  _internal_set_why(value);
  // @@protoc_insertion_point(field_set:v1advanced.BuzzPlay.why)
}
inline std::string* BuzzPlay::mutable_why() {
  // @@protoc_insertion_point(field_mutable:v1advanced.BuzzPlay.why)
  return _internal_mutable_why();
}
inline const std::string& BuzzPlay::_internal_why() const {
  return why_.GetNoArena();
}
inline void BuzzPlay::_internal_set_why(const std::string& value) {
  
  why_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BuzzPlay::set_why(std::string&& value) {
  
  why_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:v1advanced.BuzzPlay.why)
}
inline void BuzzPlay::set_why(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  why_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:v1advanced.BuzzPlay.why)
}
inline void BuzzPlay::set_why(const void* value, size_t size) {
  
  why_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:v1advanced.BuzzPlay.why)
}
inline std::string* BuzzPlay::_internal_mutable_why() {
  
  return why_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuzzPlay::release_why() {
  // @@protoc_insertion_point(field_release:v1advanced.BuzzPlay.why)
  
  return why_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuzzPlay::set_allocated_why(std::string* why) {
  if (why != nullptr) {
    
  } else {
    
  }
  why_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), why);
  // @@protoc_insertion_point(field_set_allocated:v1advanced.BuzzPlay.why)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace v1advanced

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_play_2eproto
